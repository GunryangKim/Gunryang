# -*- coding: utf-8 -*-




#함수사용전에 명심할 내용( 전처리 필수과정)

 #각 자료를 먼저 전처리된 데이터프레임형태로 변환
#fs_path = r'C:\Users\Gunryang\Quant_Python\재무제표데이터.xlsx'
#fs_df = get_finance_data(fs_path)   재무제표 데이터
#fr_path = r'C:\Users\Gunryang\Quant_Python\재무비율데이터.xlsx'
#fr_df = get_finance_data(fr_path)   재무비율 데이터
#invest_path = r'C:\Users\Gunryang\Quant_Python\투자지표데이터.xlsx'
#invest_df= get_finance_data(invest_path)  투자지표 데이터 

#price_path = r'C:\Users\Gunryang\Quant_Python\가격데이터_Origin.xlsx'
#price_df = pd.read_excel(price_path,index_col=0)  가격데이터                         
#code_data_path = r'C:\Users\gunryang\Backtest\code_data.xls' 종목명을 종목코드로 바꾸기위한 준비단계

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# 가격데이터를 전처리하는 함수( 종목코드를 종목명으로 바꿔준다. )
def get_price_data(path):
    data_path = path
    raw_data = pd.read_excel(data_path,index_col=0)
    clean_df = raw_data
    #clean_df = code_to_name(raw_data)
    
    return clean_df
    

# 재무관련 데이터 전처리하는 함수
# 재무관련 데이터 전처리하는 함수
def get_finance_data(path,code_data_path):
    data_path = path
    raw_data = pd.read_excel(data_path,index_col=0)
    big_col = list(raw_data.columns) # 상위컬럼을 리스트로 저장
    small_col = list(raw_data.iloc[0])
    
    new_big_col=[] # 상위컬럼의 na 부분을 없애주기 위해 새로운 공간을 생성
    for num,col in enumerate(big_col):
        if 'Unnamed' in col:
            new_big_col.append(new_big_col[num-1])
        else:
            new_big_col.append(big_col[num])
            
    raw_data.columns = [new_big_col,small_col]
    clean_df =  raw_data.loc[raw_data.index.dropna()]
    clean_df = clean_df.groupby(level=0).first()# 중복값 제거하고 첫번째 중복값만 살려두기
    # 인덱스의 중복여부 확인하고 싶으면 clean_df.index.is_unique 값이 True 면 중복없음
    
    clean_df = name_to_code(clean_df,code_data_path)
    
    return clean_df

# 기존 종목코드의 0이 사라진점을 보완하기위해 빈자리에 0을 넣어주는 함수 
def make_code(x):
    x = str(x)
    return '0'*(6-len(x)) + x


## 기존 데이터베이스의 한글이름을 코드로 바꿔주는 역할
def name_to_code(df,code_data_path):
    
    code_data = pd.read_excel(code_data_path)
    code_data = code_data.set_index('기업명')
    code_data= code_data[['종목코드']]
    
    code_index = []
    for name in df.index:
        try:
            
            code = make_code(code_data.loc[name]['종목코드'])
            code_index.append(code)
        except:
            print('missing name : ',name)
    
    df = df.set_index(pd.Series(code_index))
    return df
    

# 종목코드를 종목이름으로 바꿔주는 기능/ code_data 시트지와, 가격데이터 완성자료가 필요하다. 
def code_to_name(price_df): # 가격데이터의 종목코드 컬럼을 fs_df 의 종목명과 일치시키기 위해 종목명으로 변환
    
    code_data = pd.read_excel( r'C:\Users\Gunryang\Quant_Python\backtest\code_data.xls') # 비교할 종목과 종목코드가 있는 시트
    code_data=code_data[['종목코드','기업명']]
    code_data['종목코드'] = code_data['종목코드'].apply(make_code)
    code_data = code_data.set_index(code_data.columns[0])
    
    a=[] # 종목코드를 종목명으로 치환한 데이터 놓는 임시저장위치
    column_list = list(price_df.columns) # price_df 로 부터 컬럼( 종목코드) 만 취한다.
    for price_code in column_list:
        #print(code_data.loc[price_code]['기업명'])
        a.append(code_data.loc[price_code]['기업명'])
    price_df.columns = a
    
    return price_df







#N/A(IFRS) 및 완전잠식 을 NAN 으로 바꾸기 함수
def check_IFRS_Impaired(x):
    #완전잠식 및 N/A(IFRS) 표현 변환함수
    if x =='N/A(IFRS)':
        return np.NaN
    if x=='완전잠식':
        print('완전잠식, 주의요망')
        return np.NaN
    else:
        return x

#예시 fr_df[('2014/12','ROA')]=fr_df[('2014/12','ROA')].apply(check_IFRS)


# 지난분기 날짜 구하는 함수 , 리턴은 str형이다. 
def last_quarter_decision(x):
    date_list = x.split('/')
    day = int(date_list[1]) - 3
    if day <= 0:
        month = int(date_list[0])-1
        day = day+12
        return str(month) +'/' +str(day)
    else:
        month = date_list[0]
        day = day
        return str(month) +'/' + '0' +str(day)




# PER 기준으로 오름차순 정렬하는 함수 
def low_per(invest_df,index_date,index_name='수정PER(직전4분기)',num=None):
# invest_df : 정렬하고자하는 데이터프레임, index_date : 정렬하고자하는 날짜컬럼, num: 상위 PER  주식반환개수
    invest_df[(index_date,index_name)] = pd.to_numeric(invest_df[(index_date,index_name)]) # 칼럼내의 값중 숫자가 아닌것을 숫자로 변환함
    per_sorted = invest_df.sort_values(by=(index_date,index_name)) # 해당 이중컬럼기준으로 오름차순으로 정렬
    return per_sorted[index_date][:num] #이중컬럼이므로 두개의 대괄호가 들어감, num 인자를 통해 상위 PER 의 주식수만 반환


#ROA 기준으로 내림차순 정렬하는 함수
def high_roa(fr_df,index_date,index_name='ROA(평균)',num=None):
    # fr_df : 해당 데이터 베이스, index_date: 정렬기준 날짜, num: 상위 roa 순으로 반환하고자하는 주식의 수
    fr_df[(index_date,index_name)] = fr_df[(index_date,index_name)].apply(check_IFRS_Impaired)
    fr_df[(index_date,index_name)] = pd.to_numeric(fr_df[(index_date,index_name)])
    sorted_roa = fr_df.sort_values(by=(index_date,index_name),ascending=False)
    return sorted_roa[index_date][:num]


# 마법공식 함수로 만들기 ( 지표기준 --> 저PER, 고 ROA)
# 리턴하는 것은 저PER, 고ROA 를 가지는 종목을 원하는 갯수만큼 반환
def magic_formula(fr_df,invest_df,index_date,fr_index='ROA(평균)',invest_index='수정PER(직전4분기)',num=None):
    per = low_per(invest_df,index_date,invest_index,None)
    roa = high_roa(fr_df,index_date,fr_index,None)
    per['per순위'] = per[invest_index].rank()
    roa['roa순위'] = roa[fr_index].rank(ascending=False)
    magic = pd.merge(per,roa,how='outer',left_index=True,right_index=True)
    magic['마법공식순위'] = ( magic['per순위'] +magic['roa순위'] ).rank().sort_values()
    magic = magic.sort_values(by='마법공식순위')
    return magic[:num]



# 저평가된 지수를 기준으로 정렬하여 순위 만들어 주는 함수
def get_value_rank(invest_df,value_type,index_date,num):
    # invest_df :투자지표 / value_type : 투자지표 종류선택(ex:per) / index_date : 정렬 기준날짜 / num : 상위 주식개수
    invest_df[(index_date,value_type)] = pd.to_numeric(invest_df[(index_date,value_type)]) # 칼럼의 값을 모두 숫자형태로 변환
    value_sorted = invest_df.sort_values(by=(index_date,value_type))[index_date] # 해당날짜컬럼과 투자지표를 기준으로 정렬후 해당날짜만 저장
    value_sorted[value_type +'순위'] = value_sorted[value_type].rank() # 해당날짜만 저장된 데이터프레임기준으로 해당지표에 대한 랭킹컬럼생성
    return value_sorted[[value_type,value_type + '순위']][:num] #해당지표, 지표순위를 상위갯수 지정후 반환



# 저평가지수들 지표 조합 함수
def make_value_combo(value_list,invest_df,index_date,num):
    for i,value in enumerate(value_list): # value 는 각 지표를 가리킨다.
        temp_df = get_value_rank(invest_df,value,index_date,None)
        if i==0: # 맨처음인경우
            value_combo_df = temp_df # get_value_rank 함수에 의해 생성된 데이터 프레임
            rank_combo = temp_df[value + '순위'] # 순위만을 계산하는 데이터프레임 생성
        else: # 두번째 이후 루프인경우
            value_combo_df = pd.merge(value_combo_df,temp_df,how='outer',right_index=True,left_index=True) # 각 지표에 대한 데이터프레임을 연결시킴
            rank_combo = rank_combo +temp_df[value +'순위'] # 각 지표에 대한 순위를 더해서 종합순위를 구하는 데이터프레임 유지, 여기서 판다스가 알아서  공통인덱스에 대해 계산을 수행해준다. 
            
    value_combo_df['종합순위'] = rank_combo.rank() # 종합순위만을 저장했던 데이터프레임을  기존 데이터프레임에 저장
    value_combo_df = value_combo_df.sort_values(by='종합순위')
    return value_combo_df[:num]


# F-score 기법을 활용한 , 3가지 조건 만족하는 종목 반환
def get_fscore(fs_df,index_date,num): # fs_df 데이터 프레임, index_date : 기준날짜, num : 상위반환종목개수
    fscore_df = fs_df[index_date]
    fscore_df['당기순이익점수'] = fscore_df['당기순이익']>0
    fscore_df['영업활동점수'] = fscore_df['영업활동으로인한현금흐름']>0
    fscore_df['더큰영업활동점수'] = fscore_df['영업활동으로인한현금흐름']>fscore_df['당기순이익']
    fscore_df['종합점수'] = fscore_df[['당기순이익점수','영업활동점수','더큰영업활동점수']].sum(axis=1)
    fscore_df = fscore_df[fscore_df['종합점수']==3] # 3이 되는 값들을 가진 fscore_df 를 다시 재저장(필터링함)
    return fscore_df[:num]

# F-score 기법을 활용한 , 9가지 조건 만족하는 종목 반환
def get_fscore_all(fs_df,fr_df,index_date,num): # fs_df 데이터 프레임, index_date : 기준날짜, num : 상위반환종목개수
    fscore_df = fs_df[index_date]
    last_quarter = last_quarter_decision(index_date)
    fscore_df2 = fr_df[index_date] # 비율관련 
    fscore_df3 = fr_df[last_quarter]
    fscore_df['당기순이익점수'] = fscore_df['당기순이익(직전4분기)']>0 # 당기순이익 0이상인가?
    fscore_df['영업활동점수'] = fscore_df['영업활동으로인한현금흐름(직전4분기)']>0 # 영업현금흐름이 0이상인가?
    fscore_df['더큰영업활동점수'] = fscore_df['영업활동으로인한현금흐름(직전4분기)']>fscore_df['당기순이익(직전4분기)'] #영업현금흐름이 순이익보다 높은가?
    fscore_df['부채비율점수'] = pd.to_numeric(fscore_df2['부채비율'].apply(check_IFRS_Impaired)) - pd.to_numeric(fscore_df3['부채비율'].apply(check_IFRS_Impaired))<0 #부채비율이 전분기 대비 감소여부
    fscore_df['유동비율점수'] = pd.to_numeric(fscore_df2['유동비율'].apply(check_IFRS_Impaired)) - pd.to_numeric(fscore_df3['유동비율'].apply(check_IFRS_Impaired))>=0 # 유동비율 증가 여부
    
    
    fscore_df['ROA점수'] = (pd.to_numeric(fscore_df2['ROA(당기순이익,3년평균)'].apply(check_IFRS_Impaired)) - pd.to_numeric(fscore_df3['ROA(당기순이익,3년평균)'].apply(check_IFRS_Impaired)))  > 0 
    fscore_df['ROA점수2'] = (pd.to_numeric(fscore_df2['ROA(평균)'].apply(check_IFRS_Impaired)) - pd.to_numeric(fscore_df3['ROA(평균)'].apply(check_IFRS_Impaired)))  > 0
    fscore_df['최종ROA점수'] = np.logical_or(fscore_df['ROA점수'] , fscore_df['ROA점수2'] )
    # ROA 값이 증가여부 , 이지표에 대해서 아직 확신히 없기에 두가지 지표 중 하나를 택하도록 하였다. 두개를 사용하려면 np.logical_or 을 사용해야할듯 
    #fscore_df['매출총이익점수'] = fscore_df['매출총이익'] - fscore_df[(last_quarter'매출총이익')]>0 #매출총이익 증가여부 , 아직 DF 업데이트 필요
    fscore_df['총자산회전율점수'] = pd.to_numeric(fscore_df2['총자산회전율'].apply(check_IFRS_Impaired)) - pd.to_numeric(fscore_df3['총자산회전율'].apply(check_IFRS_Impaired))>=0 # 유동비율 증가 여부
    fscore_df['종합점수'] = fscore_df[['당기순이익점수','영업활동점수','더큰영업활동점수','부채비율점수','유동비율점수','최종ROA점수','총자산회전율점수']].sum(axis=1)
    fscore_df = fscore_df[fscore_df['종합점수']>=3] # 3이상이 되는 값들을 가진 fscore_df 를 다시 재저장(필터링함)
    fscore_df = fscore_df.sort_values(by='종합점수',ascending=False)
    return fscore_df[:num]

# 모멘텀 데이터프레임만들기 함수화 ( 명심할것은 가격데이터를 판다스로 가져올때 index_col=0 으로 지정하기 )
def get_momentum_rank(price_df,index_date,date_range,num): 
    # price_df : 가격데이터 데이터프레임, index_date : 모멘텀 계산기준이 되는 날짜, date_range : 모멘텀계산날짜범위(비교대상)
    momentum_df = pd.DataFrame(price_df.pct_change(date_range).loc[index_date])
    momentum_df.columns=['모멘텀']
    momentum_df['모멘텀순위'] = momentum_df['모멘텀'].rank(ascending=False)
    momentum_df = momentum_df.sort_values(by='모멘텀순위')
    return momentum_df[:num]



# 저평가 + Fscore 함수화
def get_value_quality(invest_df,fs_df,index_date,num):
    value = make_value_combo(['PER','PBR','PSR','PCR'],invest_df,index_date,None)
    quality = get_fscore(fs_df,index_date,None)
    value_quality = pd.merge(value,quality,how='outer',right_index=True,left_index=True)
    value_quality_filtered = value_quality[value_quality['종합점수']==3]
    vq_df = value_quality_filtered.sort_values(by='종합순위')
    return vq_df[:num]

# 저평가 + Fscore 함수화 F-score 지표는 9개로 수정한걸 적용
def get_value_quality_all(invest_df,fs_df,fr_df,index_date,num):
    value_list = ['수정PBR','수정PSR(연율화)','수정PER(직전4분기)','수정PCR(연율화)']
    value = make_value_combo(value_list,invest_df,index_date,None)
    quality = get_fscore_all(fs_df,fr_df,index_date,None)
    value_quality = pd.merge(value,quality,how='outer',right_index=True,left_index=True)
    value_quality_filtered = value_quality[value_quality['종합점수']>=3]
    vq_df = value_quality_filtered.sort_values(by='종합순위')
    # 함수의 의미는 F-Score 3점이상을 만족하면서 value_list 순위가 좋은대로 정렬함 
    # 즉 f-score 는 참조지표가 된다. 
    return vq_df[:num]


def select_code_by_price(price_df,data_df,start_date): # 가격값이 해당시작날짜에 nan 인 경우에 전략종목을 설정하기전에 제외하는 함수, 리턴시에 시작시점에 가격이 모두 존재하는 종목재무데이터를 반환
    new_code_list =[] # data_df 는 재무비율, 투자지표 등이 들어있는 데이터프레임
    for code in price_df[start_date].iloc[0].dropna().index:
        new_code_list.append(code)
    
    selected_df = data_df.loc[new_code_list]
    return selected_df

# 함수사용방법 ( 리밸런싱 주기 조절하는 전략날짜도출함수)
# 1. 3개월 주기로 분기재무제표데이터를 갱신할수 있고 fnguide 측 딜레이가 최대3개월인경우라면 get_strategy_date(start_date,3,3)
# 2. 3개월 주기로 분기재무제표데이터를 갱신할수 있고 fnguide 측 딜레이가 최대 6개월인경우라면 get_strategy_date(start_date,3,6)
# 3. 6개월 주기로 반기 및 결산 재무제표데이터를 갱신한다면 get_strategy_date(start_date,6)
# 4. 12개월 주기로 결산 재무제표데이터를 갱신한다면 get_strategy_date(start_date,12)
def get_strategy_date(start_date,renewal_period,delay=None): 
    temp_year = int(start_date.split('-')[0])
    temp_month = int(start_date.split('-')[1])

# 3개월간격으로 리밸던싱하되 fnguide 갱신시간과의 Delay 시간이 3개월인경우(가장이상적인 경우)
    if delay == 3:
        
        if renewal_period == 3:
            if temp_month in [1,2,3]:
                temp_month = 9
                temp_year = temp_year - 1
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date
            
            elif temp_month in [4,5,6]:
                temp_year = temp_year - 1
                temp_month = 12
                strategy_date = str(temp_year) + '/' + str(temp_month)
                return strategy_date
            
            elif temp_month in [7,8,9]:
                
                temp_month = 3
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date
            
            elif temp_month in [10,11,12]:
                
                temp_month = 6
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date

# 3개월간격으로 리밸던싱하되 fnguide 갱신시간과의 Delay 시간이 6개월인경우( 예) 6월에는 12월재무제표기준, 9월에는 3월 재무제표기준)    
    if delay == 6:
           
        if renewal_period == 3:
            if temp_month in [1,2,3]:
                temp_month = 6
                temp_year = temp_year - 1
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date
            
            elif temp_month in [4,5,6]:
                temp_year = temp_year - 1
                temp_month = 9
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date
            
            elif temp_month in [7,8,9]:
                temp_year = temp_year - 1
                temp_month = 12
                strategy_date = str(temp_year) + '/' + str(temp_month)
                return strategy_date
            
            elif temp_month in [10,11,12]:
                
                temp_month = 3
                strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
                return strategy_date

## 6개월간격으로 재무제표를 갱신하는 경우 아래의 루프로 들어간다.             
    if renewal_period ==6:
        if temp_month in [1,2,3,4,5,6]:
            temp_year = temp_year - 1
            temp_month = 6
            strategy_date = str(temp_year) + '/' + '0' + str(temp_month)
            return strategy_date
        
        elif temp_month in [7,8,9,10,11,12]:
            temp_year = temp_year - 1
            temp_month = 12
            strategy_date = str(temp_year) + '/' + str(temp_month)
            return strategy_date
            
############12개월 간격으로 재무제표를 갱신하는 경우 아래의 루프로 들어간다. 

    if renewal_period ==12:
        if temp_month in [1,2,3,4,5]:
            temp_year = temp_year - 2
            temp_month = 12
            strategy_date = str(temp_year) + '/' + str(temp_month)
            return strategy_date
        
        else:
            temp_year = temp_year - 1
            temp_month = 12
            strategy_date = str(temp_year) + '/' + str(temp_month)
            return strategy_date

import math #math 모듈을 먼저 import해야 한다.


# 리밸런싱 주기구하는 함수 만들기 
# 3개월 period, 3개월 delay 기준으로

def get_rebalance_period(start_date,end_date,renewal_period=12): #벡테스트 시작일, 벡테스트 완료일, 리밸런싱 주기
    if renewal_period ==3: # 리밸런싱 주기가 3개월일떄
        check_list = [3,6,9,12]
    elif renewal_period ==6:# 리밸런싱 주기가 6개월일떄
        check_list = [6,12]
    elif renewal_period ==12:# 리밸런싱 주기가 12개월일떄
        check_list = [12]
        
    start_date = start_date # 백테스트 시작일
    end_date = end_date # 백테스트 완료일
    
    # this_term_start 에 대한 리스트를 반환하면 된다. 
    start_year = int(start_date.split('-')[0]) # 시작년 구함
    start_month = int(start_date.split('-')[1]) # 시작달 구함
    end_year = int(end_date.split('-')[0]) # 완료년 구함
    end_month = int(end_date.split('-')[1]) #완료달 구함
    
    rebalance_list = [] # 리밸런싱 시점을 넣는 리스트

    # 시작일과 완료일의 기간차이를 달수로 구함
    year_period = (end_year-start_year)*12 # 년차이를 달로 환산시킴
    month_period = end_month - start_month # 달차이를 구함
    total_period = year_period + month_period # 총 달수차이 
    # 리밸런싱 시점을 위해 계산함
    rebalance_number = math.ceil(total_period/renewal_period) # renewal period 가 3이면 3개월 단위로 나누는것
        
    for i in range(rebalance_number): # 리밸런싱 넘버라는 인자를 통해 리밸런싱횟수를 구함
        if i==0: # 초기에 백테스트 시작일을 넣음
            rebalance_list.append(start_date)
           
        if start_month not in check_list: # 시작달이 3,6,9,12 가 아닐때(3개월기준)
            start_month = get_first_month(start_month,renewal_period) # 함수를 통해 주기에 맞는 달구함, 예를 들면 3,6,9,12 로 
            total = str(start_year) +'-'+ str(start_month) # 이를 통해 최종일자를 구함
            
        if start_date != (str(start_year) +'-'+ str(start_month)): # 초기조건에서 total 이 생성되지 않은 경우에 해당기능을 넘어가기위해 조건문 삽입
            rebalance_list.append(total) # 여기서 계속 리밸렁싱 일자를 지속 삽입함
                
        start_month = start_month + renewal_period # 시작달을 리밸런싱 주기만큼 더해줌
        if start_month >12: # 리밸런싱 주기만큼 달을 더해줄때 만약, 12월 이사으로 올라간다면
            start_year = start_year +1 # 년을 올려주고
            start_month = start_month-12 # 시작달을 12이하로 바꿔줌
            total = str(start_year) +'-'+str(start_month) #이를 total 로 지정하고 이후 루프에서 rebalance_list 에 삽입된다. 
                
        else:
            total = str(start_year) +'-'+str(start_month) # 시작달에 문제가 없으면 total 을 그래도 지정
        
                
    # rebalance_list 에 리밸런싱 시점을 모두 넣은 후 백테스트 마지막 시점을 조정하는 코딩부분             
    if end_year==int(rebalance_list[-1].split('-')[0]) and  end_month < int(rebalance_list[-1].split('-')[1]): # 리스트의 마지막날이 백테스트마지막날보다 크다면 
        del rebalance_list[-1] # 리스트의 마지막 원소를 지우고
        rebalance_list.append(end_date) # 백테스트 마지막날을 삽입한다.
    elif end_year > int(rebalance_list[-1].split('-')[0]) and  end_month <= int(rebalance_list[-1].split('-')[1]):# 리스트의 마지막날이 백테스트 마지막날보다 작으면 
        rebalance_list.append(end_date) # 특정조건 : 년수는 앞서나 달은 뒤지는 경우 백테스트의 마지막날을 삽입한다. 
      
    if end_month > int(rebalance_list[-1].split('-')[1]): # 생략은 되어있으나 년수는 앞서있고 달로 앞서있는 경우로, 위의 경우를 보완한다. 
        rebalance_list.append(end_date)
   

    return rebalance_list

# 리밸런싱 주기구하는 함수 만들기 
# get_balance_period 에 보조적으로 활용되는 함수 

def get_first_month(start_month,renewal_period): # 시작달이 리밸런싱 주기 전환시점과 가까운 달을 반환해줌
    start_month = start_month
          
    if renewal_period ==3: # 3개월 리밸런싱 주기일때
            
        if start_month in [1,2,3]: # 1,2,3월 안에 있으면
            end_month =3        #3월을 반환
        if start_month in [4,5,6]: # 4,5,6월 안에 있으면
            end_month = 6       # 6월을 반환
        if start_month in [7,8,9]: # 7,8,9월 안에 있으면
            end_month = 9       # 9월을 반환
        if start_month in [10,11,12]: # 10,11,12 월 안에 있다면
            end_month = 12          # 12월을 반환
    # 초기 리밸런싱 월을 지정해줌으로 3,6,9,12 식으로 루프문이 돌아갈 수 있게함
        
    if renewal_period ==6:
            
        if start_month in [1,2,3,4,5,6]:
            end_month =6
        if start_month in [7,8,9,10,11,12]:
            end_month = 12
            
    if renewal_period ==12:
            
        if start_month in [1,2,3,4,5,6]:
            end_month =6
        if start_month in [7,8,9,10,11,12]:
            end_month = 12
            
    return end_month

# CAGR 구하는 함수 
def get_CAGR(back_test_df,start_date, end_date):
    # back_test_df --> 최종 백테스트 결과 df, start_date --> 시작일, end_date --> 마지막일, 2019-6 과 같은 형식으로 넣어야한다.
    num_of_year = int(end_date.split('-')[0])-int(start_date.split('-')[0])
    num_of_month = int(end_date.split('-')[1])-int(start_date.split('-')[1])
    total_month = num_of_year*12 + num_of_month
    total_year_12method = total_month/12
    
    CAGR = ( back_test_result.iloc[-1]['종합포트폴리오']/back_test_result.iloc[0]['종합포트폴리오'] )**(1/total_year_12method)-1
    print('연(개월단위포함) 평균 수익률 : ', round(CAGR,4)*100, '%')
    return CAGR *100


# MDD 구하는 함수
def get_mdd(back_test_df):
    max_list =[0]
    mdd_list =[0]
    
    for i in back_test_df.index[1:]:
        max_list.append(back_test_df['총변화율'][:i].max())
        if max_list[-1]>max_list[-2]:
            mdd_list.append(0)
        else:
            mdd_list.append(min(back_test_df['총변화율'][i]-max_list[-1],mdd_list[-1]))
    
    back_test_df['max'] = max_list
    back_test_df['MDD'] = mdd_list
    
    
    # 그래프 보여줌
    plt.figure(figsize=(10,6))

    plt.subplot(2,1,1)
    back_test_result['총변화율'].plot(label='return')
    back_test_result['max'].plot(label='max')
    plt.legend()

    plt.subplot(2,1,2)
    back_test_result['MDD'].plot(label='mdd', c='black')
    plt.legend()
    plt.show()
    
    return back_test_df
    
    
